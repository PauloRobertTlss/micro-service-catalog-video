<?php

namespace Tests\Feature\Http\Controllers\Api;

use App\Http\Controllers\Api\BaseCrudController;
use App\Models\Category;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\TestResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Lang;
use Illuminate\Validation\ValidationException;
use PHPUnit\Framework\Error\Deprecated;
use Tests\Stubs\Controllers\CategoryControllerStub;
use Tests\Stubs\Models\CategoryStub;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\Traits\TestStore;
use Tests\Traits\TestValidations;

class BaseCrudControllerTest extends TestCase
{
    private $controller;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        CategoryStub::dropTable();
        CategoryStub::createTable();
        $this->controller = new CategoryControllerStub();
    }

    protected function tearDown(): void
    {
        CategoryStub::dropTable();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testIndex()
    {

        $category = CategoryStub::create([
            'name' => 'tests',
            'is_active' => true,
            'description' => 'descriptions descriptions'
        ]);

        $result = $this->controller->index();
        $serialized = $result->response->getData(true);
        $this->assertEquals(
            [$category->toArray()],
            $serialized['data']
        );

        $this->assertArrayHasKey('meta', $serialized);
        $this->assertArrayHasKey('links', $serialized);

//        $controller = new CategoryControllerStub();
//        $request = \Mockery::mock(Request::class);
//        $request->shouldReceive('has')
//            ->once()
//            ->andReturn(false);
//        $result = $controller->index($request)->toArray();
//        $this->assertEquals([$category->toArray()], $result);

    }


    public function testInvalidationDataInStore()
    {
        $this->expectException(ValidationException::class);
        $request = \Mockery::mock(Request::class);
        $request->shouldReceive('all')
            ->once()
            ->andReturn(['name' => '']);

        $this->controller->store($request);

    }

    public function testStore()
    {
        $request = \Mockery::mock(Request::class);
        $request->shouldReceive('all')
            ->once()
            ->andReturn(['name' => 'Tests','is_active' => true, 'description' => 'Test Description']);

        $result = $this->controller->store($request);
        $serialized = $result->response->getData(true);

        $this->assertEquals(CategoryStub::first()->toArray(), $serialized['data']);

    }

    public function testIfFindOrFailFetchModel()
    {

        $category = CategoryStub::create(['name' => 'Tests','is_active' => true, 'description' => 'Test Description']);
        $reflectionClass = new \ReflectionClass(BaseCrudController::class);
        $reflectionMethod = $reflectionClass->getMethod("findOrFail");
        $reflectionMethod->setAccessible(true);

        $result = $reflectionMethod->invokeArgs($this->controller, [$category->id]);

        $this->assertInstanceOf(CategoryStub::class, $result);
    }

    public function testIfFindOrFailThrowExceptionWhenIdInvalid()
    {
        $this->expectException(ModelNotFoundException::class);

        $reflectionClass = new \ReflectionClass(BaseCrudController::class);
        $reflectonMethod = $reflectionClass->getMethod('findOrFail');
        $reflectonMethod->setAccessible(true);

        $result = $reflectonMethod->invokeArgs($this->controller, [0]);

        $this->assertInstanceOf(CategoryStub::class, $result);
    }

    public function testShow()
    {
        $category = CategoryStub::create(['name' => 'Tests','is_active' => true, 'description' => 'Test Description']);
        $result = $this->controller->show($category->id);
        $serialized = $result->response()->getData(true);
        $this->assertEquals(
            $category->toArray(),
            $serialized['data']
        );
    }

    public function testUpdate()
    {
        $category = CategoryStub::create(['name' => 'Tests','is_active' => true, 'description' => 'test_description']);

        $request = \Mockery::mock(Request::class);
        $request->shouldReceive('all')
            ->once()
            ->andReturn(['name' => 'Tested','is_active' => true, 'description' => 'Test Description']);

        $result = $this->controller->update($request, $category->id);

        $serialized = $result->response()->getData(true);
        $this->assertEquals(
            $category->toArray(),
            $serialized['data']
        );
    }

    public function testDestroy()
    {
        $category = CategoryStub::create(['name' => 'Tests','is_active' => true, 'description' => 'test_description']);

        $response = $this->controller->destroy($category->id);

        $this->createTestResponse($response)
            ->assertStatus(204);

        $this->assertCount(0, CategoryStub::all());

    }



}
