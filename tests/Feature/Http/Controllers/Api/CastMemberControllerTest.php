<?php

namespace Tests\Feature\Http\Controllers\Api;

use App\Models\CastMember;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\TestResponse;
use Illuminate\Support\Facades\Lang;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\Traits\TestStore;
use Tests\Traits\TestValidations;

class CastMemberControllerTest extends TestCase
{
    use DatabaseMigrations;
    use TestValidations, TestStore;

    private $castMember;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->castMember = factory(CastMember::class)->create([
            'name' => 'diretor',
            'type' => CastMember::TYPE_DIRECTOR
        ]);
    }

    public function testCastMembers()
    {
        $response = $this->get(route('cast_members.index'));

        $response
            ->assertStatus(200)
            ->assertJson([$this->castMember->toArray()]);
    }

    public function testShow()
    {
        $response = $this->get(route('cast_members.show', ['cast_member' => $this->castMember->id]));

        $response
            ->assertStatus(200)
            ->assertJson($this->castMember->toArray());
    }

    public function testInvalidateData()
    {
        $data = ['name' => '', 'type' => ''];

        $this->assertInvalidationStoreAction($data, 'required');
        $this->assertInvalidationUpdateAction($data, 'required');


        $data = [
            'type' => 'a',
        ];

        $this->assertInvalidationStoreAction($data, 'in');
        $this->assertInvalidationUpdateAction($data, 'in');

    }

    public function testStore()
    {
        $data = [
            [
                'name' => 'tests',
                'type' => CastMember::TYPE_DIRECTOR
            ], [
                'name' => 'tests',
                'type' => CastMember::TYPE_ACTOR
            ]
        ];

        foreach ($data as $elem) {
            $response = $this->assertStore($elem, $elem + ['deleted_at' => null]);
            $response->assertJsonStructure([
                'created_at', 'updated_at'
            ]);
        }

    }


    public function testUpdate()
    {
        $data = [
            'name' => 'Tests Update',
            'type' => CastMember::TYPE_DIRECTOR
        ];

        $response = $this->assertUpdate($data, $data + ['deleted_at' => null]);

        $response->assertJsonStructure([
            'created_at', 'updated_at'
        ]);
    }


    public function testDestroy()
    {
        $response = $this->json('DELETE', route('cast_members.destroy', ['cast_member' => $this->castMember->id]));
        $response->assertStatus(204);
        $this->assertNull(CastMember::find($this->castMember->id));
        $this->assertNotNull(CastMember::withTrashed()->find($this->castMember->id));
    }

    protected function assertInvalidateData(TestResponse $response)
    {
        $this->assertInvalidationFields($response, ['name'], 'required', []);
    }

    protected function assertInvalidateMaxAndBoolean(TestResponse $response)
    {

        $this->assertInvalidationFields($response, ['name'], 'max.string', ['max' => 255]);
        $this->assertInvalidationFields($response, ['type'], 'validation.integer', []);
    }

    protected function routeStore()
    {
        return route('cast_members.store');
    }

    protected function routeUpdate()
    {
        return route('cast_members.update', ['cast_member' => $this->castMember->id]);
    }

    protected function model()
    {
        return CastMember::class;
    }

}
